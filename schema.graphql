enum SaleType {
  Single,
  Bundle
}

type OpenSeaSale @entity {
  "The transaction hash when the OpenSea sale occured"
  id: ID!

  "The sale type (Single | Bundle)"
  saleType: SaleType

  "The block number of the OpenSea sale"
  blockNumber: BigInt!

  "The timestamp of the OpenSea sale"
  blockTimestamp: BigInt!

  "A raw formated string of the token(s) sold (i.e NFTContract1-TokenID::NFTContract2-TokenID::NFTContract3-TokenID)"
  summaryTokensSold: String!

  "Nft <=> OpenSeaSale lookup table to get the list of Nfts sold in this sale"
  nftOpenSeaSaleLookupTable: [NftOpenSeaSaleLookupTable!]! @derivedFrom(field: "openSeaSale")

  "The seller address"
  seller: Bytes!

  "The buyer address"
  buyer: Bytes!

  "The ERC20 token used for the payement"
  paymentToken: Bytes!

  "The price of the OpenSea sale"
  price: BigInt!
}


type NFTItem @entity {
  "The complete NFT id sold (NFT contract - Token ID)"
  id: ID!

  "Nft <=> OpenSeaSale lookup table to get the OpenSea Sale history"
  nftOpenSeaSaleLookupTable: [NftOpenSeaSaleLookupTable!]! @derivedFrom(field: "nft")

  collection: NFTCollection!
}

type NFTCollection @entity {
  "NFT contract address"
  id: ID!

  name: String!

  "All items in the collection with at least 1 sale"
  items: [NFTItem!]! @derivedFrom(field: "collection")

  totalVolumeByAsset: [TotalVolumeByAsset!]! @derivedFrom(field: "collection")
}

type TotalVolumeByAsset @entity {
  "NFT contract address - asset symbol"
  id: ID!

  asset: String!

  assetAddress: Bytes!

  amount: BigDecimal!

  collection: NFTCollection!
}

type NftOpenSeaSaleLookupTable @entity {
  "Set to `Nft Id <=> OpenSeaSale Id"
  id: ID!

  "The Nft sold"
  nft: NFTItem!

  "The association OpenSea sale"
  openSeaSale: OpenSeaSale!
}